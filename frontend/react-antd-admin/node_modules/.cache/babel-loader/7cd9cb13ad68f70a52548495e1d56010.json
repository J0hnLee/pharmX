{"ast":null,"code":"var _jsxFileName = \"/Users/johnlee/Desktop/pharmPOS/frontend/react-antd-admin/src/views/VideoRecorder/imageCapture.js\";\n\n(function () {\n  var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;\n  enterModule && enterModule(module);\n})();\n\nvar __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {\n  return a;\n};\n\nimport React from \"react\";\nimport \"./styles.css\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\n\nconst scale = point => -(point - 70) / 50;\n\nconst Finger = ({\n  predictionsRef,\n  fingerName\n}) => {\n  const jointBottom = React.useRef();\n  const jointMiddleBottom = React.useRef();\n  const jointMiddleTop = React.useRef();\n  const jointTop = React.useRef();\n\n  const updateJoint = (point, thumb) => {\n    thumb.current.position.x = scale(point[0]);\n    thumb.current.position.y = scale(point[1]);\n    thumb.current.position.z = scale(point[2]);\n  };\n\n  useFrame(() => {\n    if (predictionsRef.current.length) {\n      updateJoint(predictionsRef.current[0].annotations[fingerName][0], jointBottom);\n      updateJoint(predictionsRef.current[0].annotations[fingerName][1], jointMiddleBottom);\n      updateJoint(predictionsRef.current[0].annotations[fingerName][2], jointMiddleTop);\n      updateJoint(predictionsRef.current[0].annotations[fingerName][3], jointTop);\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    ref: jointBottom,\n    scale: [1, 1, 1]\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.1, 32, 32]\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"white\"\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    ref: jointMiddleBottom,\n    scale: [1, 1, 1]\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.1, 32, 32]\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"white\"\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    ref: jointMiddleTop,\n    scale: [1, 1, 1]\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.1, 32, 32]\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"white\"\n  })), /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    ref: jointTop,\n    scale: [1, 1, 1]\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.1, 32, 32]\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"#eb3b5a\"\n  })));\n};\n\n__signature__(Finger, \"useRef{jointBottom}\\nuseRef{jointMiddleBottom}\\nuseRef{jointMiddleTop}\\nuseRef{jointTop}\\nuseFrame{}\", () => [useFrame]);\n\nconst Hand = ({\n  predictionsRef\n}) => {\n  const palm = React.useRef();\n  useFrame(() => {\n    if (predictionsRef.current.length) {\n      const point = predictionsRef.current[0].annotations.palmBase[0];\n      palm.current.position.x = scale(point[0]);\n      palm.current.position.y = scale(point[1]);\n      palm.current.position.z = scale(point[2]);\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    ref: palm,\n    scale: [1, 1, 1]\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.1, 32, 32]\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"#3867d6\"\n  })), /*#__PURE__*/React.createElement(Finger, {\n    predictionsRef: predictionsRef,\n    fingerName: \"thumb\"\n  }), /*#__PURE__*/React.createElement(Finger, {\n    predictionsRef: predictionsRef,\n    fingerName: \"ringFinger\"\n  }), /*#__PURE__*/React.createElement(Finger, {\n    predictionsRef: predictionsRef,\n    fingerName: \"middleFinger\"\n  }), /*#__PURE__*/React.createElement(Finger, {\n    predictionsRef: predictionsRef,\n    fingerName: \"indexFinger\"\n  }), /*#__PURE__*/React.createElement(Finger, {\n    predictionsRef: predictionsRef,\n    fingerName: \"pinky\"\n  }));\n};\n\n__signature__(Hand, \"useRef{palm}\\nuseFrame{}\", () => [useFrame]);\n\nexport default function App() {\n  const webcamRef = React.useRef(null);\n  const modelRef = React.useRef(null);\n  const requestRef = React.useRef(null);\n  const predictionsRef = React.useRef(null);\n  const [ready, setReady] = React.useState(false);\n  const capture = React.useCallback(async () => {\n    if (webcamRef.current && modelRef.current) {\n      const predictions = await modelRef.current.estimateHands(webcamRef.current.getCanvas(), true);\n\n      if (predictions) {\n        predictionsRef.current = predictions;\n      }\n\n      if (!ready) {\n        setReady(true);\n      }\n    }\n\n    requestRef.current = requestAnimationFrame(capture);\n  }, [webcamRef, ready]);\n  React.useEffect(() => {\n    const load = async () => {\n      modelRef.current = await handpose.load();\n    };\n\n    load();\n  }, [capture]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Canvas, {\n    shadowMap: true,\n    sRGB: true,\n    camera: {\n      position: [0, 0, 5]\n    }\n  }, /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: 0.4\n  }), /*#__PURE__*/React.createElement(\"spotLight\", {\n    position: [3, 0, 11],\n    angle: 0.6,\n    penumbra: 1,\n    intensity: 0.2,\n    \"shadow-mapSize-width\": 2048,\n    \"shadow-mapSize-height\": 2048,\n    \"shadow-bias\": -0.0001\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    position: [0, 0, -10],\n    receiveShadow: true,\n    castShadow: true\n  }, /*#__PURE__*/React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1000, 1000]\n  }), /*#__PURE__*/React.createElement(\"meshPhongMaterial\", {\n    attach: \"material\",\n    color: \"#00010a\"\n  })), ready && /*#__PURE__*/React.createElement(Hand, {\n    predictionsRef: predictionsRef\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"absolute\",\n      right: 10,\n      top: 10\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    width: \"200\",\n    height: \"113\",\n    mirrored: true,\n    id: \"webcam\",\n    audio: false,\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\"\n  })), !ready && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"rgba(23,32,23,0.3)\",\n      position: \"absolute\",\n      color: \"white\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      cursor: \"pointer\",\n      right: 0,\n      top: 0,\n      left: 0,\n      bottom: 0\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      requestRef.current = requestAnimationFrame(capture);\n    }\n  }, \"Start hand tracking\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"Start\"\n  }, \"\\uD83D\\uDD90\"))));\n}\n\n__signature__(App, \"useRef{webcamRef}\\nuseRef{modelRef}\\nuseRef{requestRef}\\nuseRef{predictionsRef}\\nuseState{[ready, setReady](false)}\\nuseCallback{capture}\\nuseEffect{}\");\n\n;\n\n(function () {\n  var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(scale, \"scale\", \"/Users/johnlee/Desktop/pharmPOS/frontend/react-antd-admin/src/views/VideoRecorder/imageCapture.js\");\n  reactHotLoader.register(Finger, \"Finger\", \"/Users/johnlee/Desktop/pharmPOS/frontend/react-antd-admin/src/views/VideoRecorder/imageCapture.js\");\n  reactHotLoader.register(Hand, \"Hand\", \"/Users/johnlee/Desktop/pharmPOS/frontend/react-antd-admin/src/views/VideoRecorder/imageCapture.js\");\n  reactHotLoader.register(App, \"App\", \"/Users/johnlee/Desktop/pharmPOS/frontend/react-antd-admin/src/views/VideoRecorder/imageCapture.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;\n  leaveModule && leaveModule(module);\n})();","map":{"version":3,"sources":["/Users/johnlee/Desktop/pharmPOS/frontend/react-antd-admin/src/views/VideoRecorder/imageCapture.js"],"names":["React","handpose","Webcam","Canvas","useFrame","scale","point","Finger","predictionsRef","fingerName","jointBottom","useRef","jointMiddleBottom","jointMiddleTop","jointTop","updateJoint","thumb","current","position","x","y","z","length","annotations","Hand","palm","palmBase","App","webcamRef","modelRef","requestRef","ready","setReady","useState","capture","useCallback","predictions","estimateHands","getCanvas","requestAnimationFrame","useEffect","load","right","top","backgroundColor","color","display","alignItems","justifyContent","cursor","left","bottom"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\n\nconst scale = point => -(point - 70) / 50;\n\nconst Finger = ({ predictionsRef, fingerName }) => {\n  const jointBottom = React.useRef();\n  const jointMiddleBottom = React.useRef();\n  const jointMiddleTop = React.useRef();\n  const jointTop = React.useRef();\n\n  const updateJoint = (point, thumb) => {\n    thumb.current.position.x = scale(point[0]);\n    thumb.current.position.y = scale(point[1]);\n    thumb.current.position.z = scale(point[2]);\n  };\n\n  useFrame(() => {\n    if (predictionsRef.current.length) {\n      updateJoint(\n        predictionsRef.current[0].annotations[fingerName][0],\n        jointBottom\n      );\n      updateJoint(\n        predictionsRef.current[0].annotations[fingerName][1],\n        jointMiddleBottom\n      );\n      updateJoint(\n        predictionsRef.current[0].annotations[fingerName][2],\n        jointMiddleTop\n      );\n      updateJoint(\n        predictionsRef.current[0].annotations[fingerName][3],\n        jointTop\n      );\n    }\n  });\n\n  return (\n    <>\n      <mesh castShadow receiveShadow ref={jointBottom} scale={[1, 1, 1]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.1, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" color=\"white\" />\n      </mesh>\n      <mesh castShadow receiveShadow ref={jointMiddleBottom} scale={[1, 1, 1]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.1, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" color=\"white\" />\n      </mesh>\n      <mesh castShadow receiveShadow ref={jointMiddleTop} scale={[1, 1, 1]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.1, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" color=\"white\" />\n      </mesh>\n      <mesh castShadow receiveShadow ref={jointTop} scale={[1, 1, 1]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.1, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" color=\"#eb3b5a\" />\n      </mesh>\n    </>\n  );\n};\n\nconst Hand = ({ predictionsRef }) => {\n  const palm = React.useRef();\n\n  useFrame(() => {\n    if (predictionsRef.current.length) {\n      const point = predictionsRef.current[0].annotations.palmBase[0];\n      palm.current.position.x = scale(point[0]);\n      palm.current.position.y = scale(point[1]);\n      palm.current.position.z = scale(point[2]);\n    }\n  });\n\n  return (\n    <>\n      <mesh castShadow receiveShadow ref={palm} scale={[1, 1, 1]}>\n        <sphereBufferGeometry attach=\"geometry\" args={[0.1, 32, 32]} />\n        <meshStandardMaterial attach=\"material\" color=\"#3867d6\" />\n      </mesh>\n      <Finger predictionsRef={predictionsRef} fingerName=\"thumb\" />\n      <Finger predictionsRef={predictionsRef} fingerName=\"ringFinger\" />\n      <Finger predictionsRef={predictionsRef} fingerName=\"middleFinger\" />\n      <Finger predictionsRef={predictionsRef} fingerName=\"indexFinger\" />\n      <Finger predictionsRef={predictionsRef} fingerName=\"pinky\" />\n    </>\n  );\n};\n\nexport default function App() {\n  const webcamRef = React.useRef(null);\n  const modelRef = React.useRef(null);\n  const requestRef = React.useRef(null);\n  const predictionsRef = React.useRef(null);\n  const [ready, setReady] = React.useState(false);\n\n  const capture = React.useCallback(async () => {\n    if (webcamRef.current && modelRef.current) {\n      const predictions = await modelRef.current.estimateHands(\n        webcamRef.current.getCanvas(),\n        true\n      );\n\n      if (predictions) {\n        predictionsRef.current = predictions;\n      }\n\n      if (!ready) {\n        setReady(true);\n      }\n    }\n\n    requestRef.current = requestAnimationFrame(capture);\n  }, [webcamRef, ready]);\n\n  React.useEffect(() => {\n    const load = async () => {\n      modelRef.current = await handpose.load();\n    };\n\n    load();\n  }, [capture]);\n\n  return (\n    <>\n      <Canvas shadowMap sRGB camera={{ position: [0, 0, 5] }}>\n        <ambientLight intensity={0.4} />\n        <spotLight\n          position={[3, 0, 11]}\n          angle={0.6}\n          penumbra={1}\n          intensity={0.2}\n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-bias={-0.0001}\n        />\n        <mesh position={[0, 0, -10]} receiveShadow castShadow>\n          <planeBufferGeometry attach=\"geometry\" args={[1000, 1000]} />\n          <meshPhongMaterial attach=\"material\" color=\"#00010a\" />\n        </mesh>\n        {ready && <Hand predictionsRef={predictionsRef} />}\n      </Canvas>\n      <div\n        style={{\n          position: \"absolute\",\n          right: 10,\n          top: 10\n        }}\n      >\n        <Webcam\n          width=\"200\"\n          height=\"113\"\n          mirrored\n          id=\"webcam\"\n          audio={false}\n          ref={webcamRef}\n          screenshotFormat=\"image/jpeg\"\n        />\n      </div>\n      {!ready && (\n        <div\n          style={{\n            backgroundColor: \"rgba(23,32,23,0.3)\",\n            position: \"absolute\",\n            color: \"white\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            cursor: \"pointer\",\n            right: 0,\n            top: 0,\n            left: 0,\n            bottom: 0\n          }}\n        >\n          <button\n            onClick={() => {\n              requestRef.current = requestAnimationFrame(capture);\n            }}\n          >\n            Start hand tracking{\" \"}\n            <span role=\"img\" aria-label=\"Start\">\n              🖐\n            </span>\n          </button>\n        </div>\n      )}\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}